/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MyFileChooser.java
 *
 * Created on Sep 19, 2011, 8:57:44 PM
 */
package cammons;

import cammons.providers.BasicImagesPreviewProvider;
import cammons.providers.SrcPreviewProvider;
import cammons.providers.UnsuportedPreviewProvider;
import horizontdeformer.HorizontDeformerWindow;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.AbstractAction;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileFilter;


/**
 *
 * @author judovana
 */
public class MyFileChooser extends javax.swing.JDialog {

    private void enlargeSelection(Set<File> newSelection, int inc, File[] all, File file,int border) {
        int index=-1;
        for (int j = 0; j < all.length; j++) {
            File file1 = all[j];
            if (file.equals(file1)){
                index=j;
                break;
            }

        }
        if (index<0) return;
        for (int i = index; i < all.length && i>=0; i+=inc) {
            File file1 = all[i];
            if (Math.abs(file1.lastModified()-file.lastModified())<border){
                file=file1;
                newSelection.add(file1);
            }else break;

        }
    }

    public void setCurrentDirectory(File path){
        jFileChooser1.setCurrentDirectory(path);
    }

    private static class FileTimeComparator implements  Comparator<File> {


        public int compare(File o1, File o2) {
            return (int)(o1.lastModified()-o2.lastModified());
        }
    }

    private MyFileChooser self;
    int result = JFileChooser.ERROR_OPTION;
    private List<PreviewProvider> providers=new ArrayList<PreviewProvider>();
    private Map<File, PreviewProvider> cache = new HashMap<File, PreviewProvider>();
    public static final PreviewProvider unsuportedPreview = new UnsuportedPreviewProvider();
    public static final PreviewProvider imagesPreview = new BasicImagesPreviewProvider();
    public static final PreviewProvider srcsPreview = new SrcPreviewProvider();
    /** Creates new form MyFileChooser */
    public MyFileChooser(java.awt.Frame parent) {
        super(parent, true);
        init();

    }

    public MyFileChooser() {
        super();
        init();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jFileChooser1 = new javax.swing.JFileChooser();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jCheckBox3 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setTopComponent(jFileChooser1);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        jCheckBox1.setText("enable preview");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox1);

        jCheckBox2.setText("clear current photos");
        jPanel1.add(jCheckBox2);

        jButton1.setText("select close nghbrs");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        SpinnerNumberModel n=new SpinnerNumberModel(1.5, 0.1, 10, 0.3);
        jSpinner1.setModel(n);

        jLabel1.setText("s");

        jCheckBox3.setText("fill holes");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jSpinner1, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1))
                    .addComponent(jCheckBox3))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3);

        jSplitPane2.setLeftComponent(jPanel1);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));
        jSplitPane2.setRightComponent(jPanel2);

        jSplitPane1.setRightComponent(jSplitPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        if (jCheckBox1.isSelected()){
            proceedPreview(jFileChooser1.getSelectedFiles());
            jPanel2.repaint();
        }else{
            jPanel2.removeAll();
            jPanel2.validate();
            jPanel2.repaint();
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private static final Comparator<File> fileTimeComparator=new FileTimeComparator();
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        File[] selected=this.getSelectedFiles();
        if (selected.length<=0) return;
        File dir=this.jFileChooser1.getCurrentDirectory();
        if (dir==null || !dir.isDirectory()) return;
        File[] all= dir.listFiles(new java.io.FileFilter() {

            public boolean accept(File pathname) {
                return !pathname.isDirectory();
            }
        });
        Arrays.sort(selected, fileTimeComparator);
        Arrays.sort(all, fileTimeComparator);
        Set<File> newSelection=new HashSet<File>();
        for (int i = 0; i < selected.length; i++) {
            File file = selected[i];
            newSelection.add(file);
        }
        double secondsB=((Number)(jSpinner1.getValue())).doubleValue();
        int b=(int)(10000.0*secondsB);
        if (jCheckBox3.isSelected()){
            for (int i = 0; i < selected.length; i++) {
                File file = selected[i];
                enlargeSelection(newSelection,-1,all,file,b);
                enlargeSelection(newSelection,+1,all,file,b);
            }
        }else{
        enlargeSelection(newSelection,-1,all,selected[0],b);
        enlargeSelection(newSelection,+1,all,selected[selected.length-1],b);
        }
        File[] q= newSelection.toArray(new File[newSelection.size()]);
        Arrays.sort(q,fileTimeComparator);
        jFileChooser1.setSelectedFiles(q);
        jFileChooser1.repaint();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                MyFileChooser dialog = new MyFileChooser(new javax.swing.JFrame());
                dialog.regisdterContentProvider(new BasicImagesPreviewProvider());
                dialog.regisdterContentProvider(new SrcPreviewProvider());
                dialog.setMultiSelectionEnabled(true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    // End of variables declaration//GEN-END:variables



    public File getSelectedFile() {
        return jFileChooser1.getSelectedFile();
    }

    public void setFileFilter(FileFilter imgFileFilter) {
        jFileChooser1.setFileFilter(imgFileFilter);
    }

   

    private int proceedShow(int type, Frame parent) {
        jFileChooser1.setDialogType(type);
        if (type==JFileChooser.SAVE_DIALOG) jCheckBox2.setSelected(false);
        super.setVisible(true);

        return result;

    }

    public int showSaveDialog(Frame aThis) {
        return proceedShow(JFileChooser.SAVE_DIALOG, aThis);
    }

    public int showOpenDialog(Frame aThis) {
        return proceedShow(JFileChooser.OPEN_DIALOG, aThis);
    }

    public void setMultiSelectionEnabled(boolean b) {
        jFileChooser1.setMultiSelectionEnabled(b);
    }

    public File[] getSelectedFiles() {
        return jFileChooser1.getSelectedFiles();
    }

    private void init() {
        self = this;
        this.setModal(true);
        setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        initComponents();
      
        jFileChooser1.addPropertyChangeListener(new PropertyChangeListener() {
    public void propertyChange(PropertyChangeEvent evt) {
        if (JFileChooser.SELECTED_FILE_CHANGED_PROPERTY
                .equals(evt.getPropertyName())) {
            if (jFileChooser1.isMultiSelectionEnabled()){
                return;
            }
           /* JFileChooser chooser = (JFileChooser)evt.getSource();
            File oldFile = (File)evt.getOldValue();
            File newFile = (File)evt.getNewValue();

            // The selected file should always be the same as newFile
            File curFile = chooser.getSelectedFile();
            System.out.println("----");
            if (curFile!=null){
            System.out.println(curFile.getAbsolutePath());
            }*/
            proceedPreview(new File[] {jFileChooser1.getSelectedFile()});
        } else if (JFileChooser.SELECTED_FILES_CHANGED_PROPERTY.equals(
                evt.getPropertyName())) {
         /*   JFileChooser chooser = (JFileChooser)evt.getSource();
            File[] oldFiles = (File[])evt.getOldValue();
            File[] newFiles = (File[])evt.getNewValue();

            // Get list of selected files
            // The selected files should always be the same as newFiles
            File[] files = chooser.getSelectedFiles();
            System.out.println("--------------");
            for (int i = 0; i < files.length; i++) {
                File file = files[i];
                System.out.println(file.getAbsolutePath());

            }*/
            proceedPreview(jFileChooser1.getSelectedFiles());
        }
    }

        }) ;

        
        jFileChooser1.addActionListener(new AbstractAction() {

            public void actionPerformed(ActionEvent evt) {
                JFileChooser chooser = (JFileChooser) evt.getSource();
                if (JFileChooser.APPROVE_SELECTION.equals(evt.getActionCommand())) {
                    // Open or Save was clicked
                    result = JFileChooser.APPROVE_OPTION;
                    // Hide dialog
                    self.setVisible(false);
                } else if (JFileChooser.CANCEL_SELECTION.equals(evt.getActionCommand())) {
                    // Cancel was clicked
                    result = JFileChooser.CANCEL_OPTION;
                    // Hide dialog
                    self.setVisible(false);
                }
            }
        });
    }


    public void regisdterContentProvider(PreviewProvider provider){
        for (Iterator<PreviewProvider> it = providers.iterator(); it.hasNext();) {
            PreviewProvider previewProvider = it.next();
            if (previewProvider.getClass()==provider.getClass()){
                throw new SecurityException("This Filechooser already contains "+previewProvider.getClass().toString());
            }

        }
    providers.add(provider);
    }

    public void regisdterContentProviders(PreviewProvider[] provider){
        for (int i = 0; i < provider.length; i++) {
            PreviewProvider previewProvider = provider[i];
            regisdterContentProvider(previewProvider);

        }
    }

    public void unregisterAllContentProviders(){
        providers=new ArrayList<PreviewProvider>(0);
    }
    public void unregisterContentProvider(PreviewProvider p){
         for (int i = 0; i < providers.size(); i++) {
            PreviewProvider previewProvider = providers.get(i);
            if (previewProvider.getClass()==p.getClass()){
                providers.remove(i);
                i--;
            }

        }



        }



            private void proceedPreview(File[] selectedFiles) {
                if (jCheckBox1.isSelected()){
                    jPanel2.removeAll();
                Map<File, PreviewProvider> nwcache = new HashMap<File, PreviewProvider>();
                    for (int i = 0; i < selectedFiles.length; i++) {
                        File file = selectedFiles[i];
                        if (file==null) continue;
                        PreviewProvider cached=cache.get(file);
                        if (cached==null){
                            for (int j = 0; j < providers.size(); j++) {
                                PreviewProvider previewProvider = providers.get(j);
                                if (previewProvider.canAccept(file)) {
                                    try{
                                    cached=previewProvider.getInstance(file);
                                    }catch (Exception ex){
                                        ex. printStackTrace();
                                        cached=null;
                                        JOptionPane.showMessageDialog(self, ex.getMessage());
                                    }
                                    break;
                            }
                        }
                            if (cached==null){
                                try{
                            cached=unsuportedPreview.getInstance(file);
                                }catch (Exception ex){
                                        ex.printStackTrace();
                                        cached=null;
                            }}
                            
                    }else{
                     //nope; already have preview
                     //  System.out.println("match");
                    }
                        if (cached!=null){
                nwcache.put(file, cached);
                jPanel2.add(cached.placeYourself(null));
                        }
                
                }
                
                cache=nwcache;
                jPanel2.validate();

            }
    }


            public void setClearCurretnPhotosVisible(boolean b){
                jCheckBox2.setVisible(b);
            }
            public void disableCurretnPhotosVisible(boolean b){
                jCheckBox2.setVisible(b);
                jCheckBox2.setSelected(b);

            }
            public boolean isClearCurretnPhotosSelected(){
                return jCheckBox2.isSelected();
            }
}
